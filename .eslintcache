[{"/home/cwelshofer/workspace/finalcapstone-client/src/index.js":"1","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolution.js":"2","/home/cwelshofer/workspace/finalcapstone-client/src/components/ApplicationViews.js":"3","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionDetail.js":"4","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionProvider.js":"5","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionList.js":"6","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/Resolution.js":"7","/home/cwelshofer/workspace/finalcapstone-client/src/components/auth/Login.js":"8","/home/cwelshofer/workspace/finalcapstone-client/src/components/auth/Register.js":"9","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UserProvider.js":"10","/home/cwelshofer/workspace/finalcapstone-client/src/components/nav/NavBar.js":"11","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagProvider.js":"12","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagResolutionProvider.js":"13","/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteTagItem.js":"14","/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteItem.js":"15","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/UserResolutions.js":"16","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionForm.js":"17","/home/cwelshofer/workspace/finalcapstone-client/src/components/Categories/CategoryProvider.js":"18","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/HomeList.js":"19","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagForm.js":"20","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/Tag.js":"21","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagList.js":"22","/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteTag.js":"23","/home/cwelshofer/workspace/finalcapstone-client/src/components/Categories/CategoryList.js":"24","/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteCategory.js":"25","/home/cwelshofer/workspace/finalcapstone-client/src/components/Categories/CategoryForm.js":"26","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UserDetail.js":"27","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UserList.js":"28","/home/cwelshofer/workspace/finalcapstone-client/src/components/Subscriptions/SubscriptionProvider.js":"29","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UsersTable.js":"30","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/Columns.js":"31","/home/cwelshofer/workspace/finalcapstone-client/src/components/Comments/CommentProvider.js":"32","/home/cwelshofer/workspace/finalcapstone-client/src/components/Comments/CommentForm.js":"33","/home/cwelshofer/workspace/finalcapstone-client/src/components/Comments/Comment.js":"34","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/MyCompletedResolutions.js":"35","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/CompletedResolutions.js":"36","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/AllUsersResolutions.js":"37","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/ProfileResolutions.js":"38"},{"size":377,"mtime":1610321243660,"results":"39","hashOfConfig":"40"},{"size":1389,"mtime":1608135777342,"results":"41","hashOfConfig":"40"},{"size":5512,"mtime":1609862809896,"results":"42","hashOfConfig":"40"},{"size":5346,"mtime":1610137649874,"results":"43","hashOfConfig":"40"},{"size":6110,"mtime":1610465661288,"results":"44","hashOfConfig":"40"},{"size":1298,"mtime":1610136238322,"results":"45","hashOfConfig":"40"},{"size":550,"mtime":1610135384263,"results":"46","hashOfConfig":"40"},{"size":3394,"mtime":1610324959225,"results":"47","hashOfConfig":"40"},{"size":4160,"mtime":1610320151189,"results":"48","hashOfConfig":"40"},{"size":1622,"mtime":1608146566907,"results":"49","hashOfConfig":"40"},{"size":4187,"mtime":1610333030996,"results":"50","hashOfConfig":"40"},{"size":2042,"mtime":1608315940743,"results":"51","hashOfConfig":"40"},{"size":2258,"mtime":1608317317199,"results":"52","hashOfConfig":"40"},{"size":1667,"mtime":1608240944961,"results":"53","hashOfConfig":"40"},{"size":1767,"mtime":1610333953100,"results":"54","hashOfConfig":"40"},{"size":1420,"mtime":1610135439512,"results":"55","hashOfConfig":"40"},{"size":9986,"mtime":1610409122566,"results":"56","hashOfConfig":"40"},{"size":2342,"mtime":1608322946454,"results":"57","hashOfConfig":"40"},{"size":2102,"mtime":1610409398493,"results":"58","hashOfConfig":"40"},{"size":3558,"mtime":1610427406632,"results":"59","hashOfConfig":"40"},{"size":225,"mtime":1609863406714,"results":"60","hashOfConfig":"40"},{"size":2049,"mtime":1610401078877,"results":"61","hashOfConfig":"40"},{"size":1525,"mtime":1610421096751,"results":"62","hashOfConfig":"40"},{"size":2123,"mtime":1610405290501,"results":"63","hashOfConfig":"40"},{"size":1618,"mtime":1610408881657,"results":"64","hashOfConfig":"40"},{"size":3102,"mtime":1610412917211,"results":"65","hashOfConfig":"40"},{"size":3597,"mtime":1610133545512,"results":"66","hashOfConfig":"40"},{"size":1925,"mtime":1610334470523,"results":"67","hashOfConfig":"40"},{"size":1837,"mtime":1608754290872,"results":"68","hashOfConfig":"40"},{"size":684,"mtime":1608756035180,"results":"69","hashOfConfig":"40"},{"size":551,"mtime":1608754879677,"results":"70","hashOfConfig":"40"},{"size":2163,"mtime":1608842245615,"results":"71","hashOfConfig":"40"},{"size":3999,"mtime":1610421964206,"results":"72","hashOfConfig":"40"},{"size":1637,"mtime":1610400950730,"results":"73","hashOfConfig":"40"},{"size":1555,"mtime":1610134141248,"results":"74","hashOfConfig":"40"},{"size":1333,"mtime":1610134238665,"results":"75","hashOfConfig":"40"},{"size":1393,"mtime":1609717195239,"results":"76","hashOfConfig":"40"},{"size":1691,"mtime":1609797305381,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"15i2nzd",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"80"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"80"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"80"},"/home/cwelshofer/workspace/finalcapstone-client/src/index.js",[],["177","178"],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolution.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/ApplicationViews.js",["179","180"],"//renders each imported component depending on the URl path \nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { ResolutionProvider } from \"./Resolutions/ResolutionProvider\";\nimport { ResolutionList } from \"./Resolutions/ResolutionList\";\nimport { ResolutionDetails } from \"./Resolutions/ResolutionDetail\";\nimport { ResolutionForm } from \"./Resolutions/ResolutionForm\";\nimport { TagProvider } from \"./tags/TagProvider\";\nimport { TagResolutionProvider } from \"./tags/TagResolutionProvider\";\nimport { UsersResolutions } from \"./Resolutions/UserResolutions\";\nimport { CategoryProvider } from \"./Categories/CategoryProvider\";\nimport { TagForm } from \"./tags/TagForm\";\nimport { TagList } from \"./tags/TagList\";\nimport { UserProvider } from \"./Profiles/UserProvider\";\nimport { CategoryList } from \"./Categories/CategoryList\";\nimport { UsersTable } from \"./Profiles/UsersTable\";\nimport { CategoryForm } from \"./Categories/CategoryForm\";\nimport { UserDetail } from \"./Profiles/UserDetail\";\nimport { UsersList } from \"./Profiles/UserList\";\nimport { SubscriptionProvider } from \"./Subscriptions/SubscriptionProvider\";\nimport { CommentProvider } from \"./Comments/CommentProvider\";\nimport { CommentForm } from \"./Comments/CommentForm\"\nimport { CommentList } from \"./Comments/Comment\"\nimport { MyCompletedResolutionList } from \"./Resolutions/MyCompletedResolutions\"\nimport { CompletedResolutionList } from \"./Resolutions/CompletedResolutions\"\nimport { HomeList } from \"./Profiles/HomeList\"\nimport { AllUsersResolutions } from \"./Resolutions/AllUsersResolutions\"\nimport { UsersProfileResolutions } from \"./Profiles//ProfileResolutions\"\n\n\nexport const ApplicationViews = (props) => {\n  return (\n    <>\n      <main\n        style={{\n          margin: \"5rem 2rem\",\n          lineHeight: \"1.75rem\",\n        }}\n      >\n        {/****** HOME ***** POST FORM & DETAILS ******* MY POSTS ******* */}\n\n        <ResolutionProvider>\n          <CategoryProvider>\n            <TagResolutionProvider>\n              <TagProvider>\n                <SubscriptionProvider>\n                  <CommentProvider>\n                    <Route exact path=\"/home\"\n                          render={(props) => <HomeList {...props} />}\n                          />\n                    <Route exact path=\"/resolutions\"\n                      render={(props) => <ResolutionList {...props} />}\n                    />\n                    <Route path=\"/profiles/:userId(\\d+)\"\n                      render={props => <UserDetail {...props} />}\n                    />\n                    <Route exact path=\"/resolutions/create\"\n                      render={(props) => <ResolutionForm {...props} />}\n                    />\n                    <Route exact path=\"/resolutions/edit/:resolutionId(\\d+)\"\n                      render={(props) => <ResolutionForm {...props} />}\n                    />\n                    <Route exact path=\"/resolutions/comments/:resolutionId(\\d+)\"\n                      render={(props) => <CommentList {...props} />}\n                    />\n                    <Route exact path=\"/myresolutions\"\n                      render={(props) => <UsersResolutions {...props} />}\n                    />\n                    <Route path=\"/resolutions/comments/create/:resolutionId(\\d+)\"\n                      render={(props) => <CommentForm {...props} />}\n                    />\n                    <Route path=\"/resolutions/:resolutionId(\\d+)\"\n                      render={(props) => <ResolutionDetails {...props} />}\n                    />\n                    <Route path=\"/mycompletedresolutions\"\n                      render={(props) => <MyCompletedResolutionList {...props} />}\n                    />\n                         <Route path=\"/allcompletedresolutions\"\n                      render={(props) => <CompletedResolutionList {...props} />}\n                    />\n                        <Route path=\"/usersresolutions/:userId(\\d+)\"\n                      render={(props) => <UsersProfileResolutions {...props} />}\n                    />\n\n                  </CommentProvider>\n                </SubscriptionProvider>\n              </TagProvider>\n            </TagResolutionProvider>\n          </CategoryProvider>\n        </ResolutionProvider>\n\n\n        <TagProvider>\n          <UserProvider>\n\n            <Route exact path=\"/tags/create\" render={(props) => {\n              return <TagForm {...props} />\n            }}\n            />\n            <Route exact path=\"/tags/edit/:tagId(\\d+)\"\n              render={(props) => <TagForm {...props} />}\n            />\n            <Route exact path=\"/tags\" render={(props) => {\n              return <TagList {...props} />\n            }}\n            />\n          </UserProvider>\n        </TagProvider>\n\n        <UserProvider>\n          <SubscriptionProvider>\n            <Route exact path=\"/profile\" render={\n              props => <UserDetail {...props} />} />\n            <Route exact path=\"/users\"><UsersList /></Route>\n          </SubscriptionProvider>\n        </UserProvider>\n\n\n\n        <UserProvider>\n          <CategoryProvider>\n            <Route exact path=\"/categories\" render={\n              (props) => <CategoryList {...props} />} />\n            <Route exact path=\"/categories/create\" render={\n              (props) => <CategoryForm {...props} />} />\n            <Route exact path=\"/editcategory/:categoryId(\\d+)\" render={\n              (props) => <CategoryForm {...props} />} />\n          </CategoryProvider>\n        </UserProvider>\n\n      </main>\n    </>\n\n  );\n};\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionDetail.js",["181","182","183","184","185","186","187","188","189","190"],"/* displays details of a post, lets user add reactions (maximum one of each) to post, \nlets user edit post if they are the author, or see author's profile if it was written by another user */\nimport React, { useContext, useEffect, useState, useRef } from \"react\";\nimport { ResolutionContext } from \"./ResolutionProvider\";\nimport { Link } from \"react-router-dom\";\nimport { TagResolutionContext } from \"../tags/TagResolutionProvider\";\nimport { TagContext } from \"../tags/TagProvider\";\nimport { DeleteItem } from \"../utils/DeleteItem\"\nimport { Box, Heading } from \"grommet\";\nimport { Button } from 'evergreen-ui';\nimport \"./Resolutions.css\"\n\n\nexport const ResolutionDetails = (props) => {\n  const { getResolutionById, resolution, setResolution, getTagsByResolution, resolutionTags} = useContext(ResolutionContext);\n  const { tag, tags, getTags } = useContext(TagContext)\n  const { TagResolutions } = useContext(TagResolutionContext);\n\n  //state variable and variables needed to make tag management work\n  const [selectedTagResolutionId, setSelectedTagResolutionId] = useState(0);\n  const [filteredTags, setFilteredTags] = useState([])\n  const [stateTagIDArr, setTagIDArr] = useState([])\n\n  //other variables defined through useRef and the URL\n  const tagResolutionId = useRef(null);\n  const resolutionId = parseInt(props.match.params.resolutionId);\n\n  //gets a post by the post ID and gets the tags associated with that post\n  useEffect(() => {\n    getTags()\n    getResolutionById(resolutionId).then(setResolution);\n    getTagsByResolution(resolutionId);\n  }, [TagResolutions]);\n\n  useEffect(() => {\n    //filters tags that haven't been selected yet to be options for adding\n    const tagIDs = tags.map(t => t.id)\n    const resolutionTagIDs = resolutionTags.map(pt => pt.id)\n    const diffIDs = tagIDs.filter(t => !resolutionTagIDs.includes(t))\n    const filteredTagObjs = diffIDs.map(id => {\n      return tags.find(t => t.id === id)\n    })\n    setFilteredTags(filteredTagObjs)\n  }, [resolutionTags])\n\n\n  //state variable and functions to show/hide the tag management feature\n  const [open, setOpen] = useState();\n  \n  //takes what is selected in the tag management dropdown and sets the state variable with that value\n  const handleChange = (e) => {\n    setSelectedTagResolutionId(parseInt(e.target.value));\n  };\n  \n  const handleAddTags = (browserEvent) => {\n    const stateCopyID = stateTagIDArr.slice()\n    let newTagItem = parseInt(browserEvent.target.value)\n    stateCopyID.push(newTagItem)\n    //IDs of tags to be added get stored in this variable\n    setTagIDArr(stateCopyID)\n  }\n\n  return (\n    <>\n       <Box margin= \"medium\">\n      {/* Post Detail JSX */}\n      <section className=\"container__card\">\n        <section className=\"container__cardContent\">  \n          <section className=\"container__cardContentLeft\"></section>        \n          <Heading level = \"2\">{resolution.title}</Heading>\n          \n          {/* if current user wrote the post, show an edit button */}\n          {resolution.created_by_current_user \n          ? (\n              <section className=\"container__cardContentTop\">   <Button marginRight={16} appearance=\"primary\" intent=\"Edit\"          \n                 onClick={() => props.history.push(`/resolutions/edit/${resolution.id}`)}>\n                  EDIT\n               \n                </Button>\n                {resolution.created_by_current_user ? <DeleteItem resolutionId= {resolution.id}/> : <></>}\n              </section>\n          )\n          : (``)\n          }\n          \n         \n          {/* <ReactionList {...props} /> */}\n          <div className=\"resolution__content\">{resolution.content}</div>\n          <div key={resolution.id} className=\"resolution__date\">\n            Published: {new Date(resolution.publication_date).toLocaleDateString(\"en-US\")}\n          </div>\n          \n          <div>\n            {resolution.created_by_current_user \n            ? (\n              <section className=\"container__cardContentBottom\">\n                <div className=\"resolution_author\">\n                  By: {resolution.user.user.first_name} (you)\n                </div>\n              </section>\n            ) \n            : (\n              <>\n            <section className=\"container__cardContentBottom\">\n                <div className=\"resolution_author\">\n                  {\"By: \"} \n                  <Link to={{ pathname: `/profiles/${resolution.user.id}` }}>\n                      {resolution.user.user.first_name}\n                  </Link>\n                </div>\n          \n        \n\n          {/* If current user did not write the post, show the author name with a link to their profile*/}\n         \n                \n            </section>\n            <Button className=\"container__cardContentTop\" onClick={() => props.history.push(`/resolutions/comments/${resolution.id}`)}>COMMENTS\n            </Button>\n            </>\n            \n            )\n            }\n          </div>\n        </section>\n\n        <section className=\"container__cardContentRight\">          \n          <div>\n            {resolutionTags.map((resolutionTag) => {\n              return  resolutionTag.tag.label ? <div className=\"displayedTag\"># {resolutionTag.tag.label}</div>  : null      \n                      \n            })}\n          </div>\n        </section>\n\n\n      </section>\n      </Box>\n  \n      \n    </>\n  );\n};\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionList.js",["191"],"//child of HomeList, list of all posts, user can delete only their own post\nimport {Link} from \"react-router-dom\"\nimport React, { useContext, useEffect } from \"react\"\nimport { ResolutionContext } from \"./ResolutionProvider\"\nimport { Resolution } from \"./Resolution\"\nimport { Button } from \"evergreen-ui\"\n\nexport const ResolutionList = () => {\n    // This state changes when `getLocations()` is invoked below\n    const { resolutions, getFalseResolutions } = useContext(ResolutionContext)\n\n    /*\n        What's the effect this is reponding to? Component was\n        \"mounted\" to the DOM. React renders blank HTML first,\n        then gets the data, then re-renders.\n    */\n    useEffect(() => {\n        getFalseResolutions()\n    }, [])\n\n    /*\n        This effect is solely for learning purposes. The effect\n        it is responding to is that the location state changed.\n    */\n    useEffect(() => {\n    }, [resolutions])\n\n    return (\n        \n        <div className=\"resolutions\">\n            \n            <h2 className=\"res\">Resolutions</h2>\n        {\n            resolutions.map(res => <Resolution key={res.id} resolution={res} />)\n        }<Button>\n         <Link className=\"resolutionLink\" to={'/resolutions/create'}>\n            add Resolution\n    </Link>\n    </Button>\n        </div>\n    )\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/Resolution.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/auth/Login.js",["192","193","194"],"//login page\nimport React, { useRef, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  Anchor,\n  Form,\n  Layer,\n} from \"grommet\";\nimport { Button, TextInput, FormField, Heading, Pane } from \"evergreen-ui\"\nimport \"./auth.css\"\n\nexport const Login = (props) => {\n  const user = useRef();\n  const password = useRef();\n\n  const [show, setShow] = useState();\n  const [showUser, setShowUser] = useState();\n\n  // see if user already exists\n  const existingUserCheck = () => {\n    return fetch(`http://localhost:8000/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: user.current.value,\n        password: password.current.value,\n      }),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((user) => {\n        return user !== undefined ? user : false;\n      });\n  };\n\n  const handleLogin = (e) => {\n    console.log(user.current.value, password.current.value);\n    e.preventDefault();\n    existingUserCheck().then((exists) => {\n      if (exists.valid) {\n        localStorage.setItem(\"resolution_user_id\", exists.token);\n        props.history.push(\"/home\");\n      } else if (exists.valid != true) {\n        setShow(true);\n      } else if (!exists) {\n        setShowUser(true);\n      }\n    });\n  };\n\n  return (\n    <Pane direction=\"column\" animation=\"fadeIn\">\n      <Pane className=\"container--login\">\n        {showUser && (\n          <Layer>\n            <Heading level=\"3\">User does not exist</Heading>\n            <Button\n              label=\"Close\"\n              className=\"button--close\"\n              onClick={() => setShowUser(false)}\n            />\n          </Layer>\n        )}\n        {show && (\n          <Layer>\n            <Heading level=\"3\">Password does not match</Heading>\n            <Button\n              className=\"button--close\"\n              label=\"Close\"\n              primary\n              onClick={() => setShow(false)}\n            />\n          </Layer>\n        )}\n      </Pane>\n  \n        <h2 className=\"friends\">Friends and Family Resolutions</h2>\n        <h3 className=\"friends\">Sign In</h3>\n        <Form className=\"form--login\" onSubmit={handleLogin}>\n          <FormField label=\"Email address\" htmlFor=\"inputEmail\">\n            <TextInput\n              ref={user}\n              type=\"email\"\n              id=\"email\"\n              placeholder=\"Email address\"\n              required\n            />\n          </FormField>\n          <FormField label=\"Password\" htmlFor=\"inputPassword\">\n            <TextInput\n              ref={password}\n              type=\"password\"\n              id=\"password\"\n              placeholder=\"Password\"\n              required\n            />\n          </FormField>\n          <FormField>\n           \n              <Button\n                size=\"large\"\n                label=\"sign in\"\n                fill={false}\n                margin=\"small\"\n                pad=\"small\"\n                primary\n                type=\"submit\"\n              > Sign In </Button>\n\n          </FormField>\n        </Form>\n      <Pane className=\"link--register\">\n     <Link\n          as={Link}\n          to=\"/register\"\n          title=\"register\"\n          href=\"/register\"\n          margin=\"small\"\n          justify=\"center\"\n        >\n          Not a member yet?\n       </Link>\n      </Pane>\n    </Pane>\n  );\n};\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/auth/Register.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UserProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/nav/NavBar.js",["195","196","197","198","199","200","201"],"//renders nav links that redirect user to various paths\nimport { Tab, Button, Heading, Pane } from \"evergreen-ui\"\nimport React, { useContext, useEffect } from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { UserContext } from \"../Profiles/UserProvider\"\nimport \"./NavBar.css\"\nimport fireworks from \"./fireworks.png\"\nimport { MenuIcon, PersonIcon, WrenchIcon, EndorsedIcon, SmallTickIcon, PeopleIcon, HomeIcon, LogOutIcon, PropertiesIcon } from \"evergreen-ui\"\n\n\nexport const NavBar = () => {\n    const history = useHistory()\n\n    const { getCurrentUser, setCurrentUser, currentUser } = useContext(UserContext)\n\n    useEffect(() => {\n        getCurrentUser().then( res =>\n            setCurrentUser(res)\n        )\n    }, [])\n\n    return (\n        <section className=\"container--navbar\">\n            <div className=\"friends\">\n                <div className=\"fireworks\">\n                <img src={fireworks} />\n            </div>\n            <div className=\"star\">\n        Friends and Family Resolutions\n        </div>\n            <div className=\"fireworkz\">\n                <img src={fireworks} />\n            </div>\n          \n \n        </div>          \n        <ul className=\"navbar\">\n            {/* <li className=\"navbar__item\">\n                <img className=\"navbar__logo\" src={Logo} />\n            </li> */}\n      \n            <Button marginRight={16} appearance=\"primary\">\n           <HomeIcon />\n                <Link className=\"navbar__link\" to=\"/home\">Home</Link>\n            </Button>\n            <Button marginRight={16} appearance=\"primary\" intent=\"danger\">\n             <MenuIcon />\n          \n                <Link className=\"navbar__link\" to=\"/resolutions\">Resolutions</Link>\n            </Button>\n            <Button marginRight={16} appearance=\"primary\" intent=\"warning\">\n            <PropertiesIcon />\n                <Link className=\"navbar__link\" to=\"/myresolutions\">My Resolutions</Link>\n            </Button>\n            \n            <Button marginRight={16} appearance=\"primary\" intent=\"success\">\n            <PeopleIcon />\n                <Link className=\"navbar__link\" to=\"/users\">All Users</Link>\n           </Button>\n           <Button marginRight={16} appearance=\"primary\" intent=\"default\">\n           <WrenchIcon />\n                <Link className=\"navbar__link\" to=\"/tags\">Tag Management</Link>\n            </Button>\n            <Button marginRight={16} appearance=\"primary\" intent=\"danger\">\n             <WrenchIcon />\n                <Link className=\"navbar__link\" to=\"/categories\">Category Management</Link>\n               \n            </Button>\n            \n             <Button marginRight={16} appearance=\"primary\" intent=\"success\">\n             <SmallTickIcon />\n                <Link className=\"navbar__link\" to=\"/mycompletedresolutions\">My Completed Resolutions</Link>\n            </Button>\n            <Button marginRight={16} appearance=\"primary\" intent=\"warning\">\n            <EndorsedIcon />\n                <Link className=\"navbar__link\" to=\"/allcompletedresolutions\">All Completed Resolutions</Link>\n            </Button>\n            <Button marginRight={16} appearance=\"primary\" intent=\"default\">\n            <PersonIcon />\n                <Link className=\"navbar__link\" to=\"/profile\">My Profile</Link>\n            </Button>\n            {\n                (localStorage.getItem(\"resolution_user_id\") !== null) ?\n                 \n                        <Button className=\"navbar__item__fakeLink\"\n                        \n                            onClick={() => {\n                                localStorage.removeItem(\"resolution_user_id\")\n                                history.push({ pathname: \"/\" })\n                            }}\n                        ><LogOutIcon />Logout</Button>:\n                    <>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/login\">Login</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/register\">Register</Link>\n                        </li>\n                    </>\n            }        </ul>\n        </section>\n    )\n}\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagResolutionProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteTagItem.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteItem.js",["202"],"//delete button component with confirmation modal\nimport React, { useState, useContext } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { ResolutionContext } from \"../Resolutions/ResolutionProvider\";\nimport { Button } from 'evergreen-ui'\n\n\nexport const DeleteItem = ({ resolutionId }) => {\n  const { deleteResolution } = useContext(ResolutionContext);\n  const history = useHistory()\n  \n  //state variable and functions that change state of the state variable\n  const [open, setOpen] = useState();\n  const onOpen = () => setOpen(true);\n  const onClose = () => setOpen(undefined);\n\n  //toggles the CSS class name depending on if the modal is open or not\n  const showHideClassName = open ? \"modal display-block\" : \"modal display-none\";\n\n  //function that is called when the delete button is clicked. \n  //This function deletes an entry in the Post table.\n  //Lastly the function calls the close function which resets our modal state.\n  const deleteThisResolution = () => {\n    deleteResolution(resolutionId)\n    .then(() => {\n      history.push(\"/home\")\n    })\n  };\n\n  return (\n    <>\n      <Button marginRight={16} appearance=\"primary\" intent=\"Delete\" onClick={onOpen}>DELETE</Button>\n      {open && (\n        <div className={showHideClassName}>\n          <div className=\"modal-main\">\n            <h3>\n              Confirm\n            </h3>\n            <p>Are you sure you want to delete?</p>\n            <div>\n            <Button marginRight={16} appearance=\"primary\" intent=\"Delete\" onClick={deleteThisResolution}> <strong>Delete</strong></Button>\n            <Button marginRight={16} appearance=\"primary\" intent=\"Cancel\" onClick={onClose}> Cancel </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/UserResolutions.js",["203"],"//shows user their own posts in MyPosts view, allows them to delete a post\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ResolutionContext } from \"./ResolutionProvider\";\nimport { UserContext } from \"../Profiles/UserProvider\"\nimport { Menu } from \"evergreen-ui\"\n\n\nexport const UsersResolutions = () => {\n  const { getResolutionByUser } = useContext(ResolutionContext);\n  const { getCurrentUser } = useContext(UserContext)\n\n  const [usersResolutions, setUsersResolutions] = useState([]);\n \n  useEffect(() => {\n    getCurrentUser()\n    //returns res.json() that is immediately passed to the next .then()\n    //res.json() is the current user object\n      .then((user) => getResolutionByUser(user.id))\n      .then(setUsersResolutions)\n  }, [])\n\n  return (\n    <>\n      <h2 className=\"res\">My Resolutions</h2>\n      \n      {usersResolutions.map((r) => {\n        return (\n            <Menu>\n            <Menu.Item>\n          <div key={r.id} className=\"User\">\n            <div className=\"mydiv\">\n              \n                <Link to={{ pathname: `resolutions/${r.id}` }}>\n                  {r.title}\n                </Link>\n              \n              ----{r.user.user.first_name}\n              {r.category==null? \"\" :<p>{r.category.label}</p>}\n            </div>\n          </div>\n          </Menu.Item>\n          </Menu>\n        )\n      })}\n    </>\n  )\n}\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/ResolutionForm.js",["204","205","206","207","208","209","210","211","212","213","214","215","216","217"],"//form that allows users to create and edit a post\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { ResolutionContext } from \"./ResolutionProvider\";\nimport { CategoryContext } from \"../Categories/CategoryProvider\";\nimport { TagContext } from \"../tags/TagProvider\";\nimport { TagResolutionContext } from \"../tags/TagResolutionProvider\"\nimport { Grommet, Box, DataTable } from 'grommet';\nimport { columns } from '../Profiles/Columns'\nimport { Button, SelectMenu, Select, TextInput, Checkbox } from 'evergreen-ui'\n\n\nconst controlledColumns = columns.map(col => ({ ...col }));\n\nexport const ResolutionForm = (props) => {\n    const { addResolution, updateResolution, getResolutionById, resolutionTags, getTagsByResolution, getResolutions, resolutions, completeResolution } = useContext(ResolutionContext)\n    const { categories, getCategories } = useContext(CategoryContext)\n    const { tag, tags, getTags } = useContext(TagContext)\n    const { createTagResolution, deleteTagResolution } = useContext(TagResolutionContext)\n\n    const [resolutionObj, setResolutionObj] = useState({completed:false}) //defines and sets the state of the postObj in this module\n    const [checkedState, setCheckedState] = useState([])\n    const [checked, setChecked] = useState([]);\n\n    const editMode = props.match.url.split(\"/\")[2] === \"edit\" //checks url to see if editMode\n    const resolutionId = parseInt(props.match.params.resolutionId)\n    let filteredTrue = []\n    let checkedTagsArray = []\n    const resolutionTagsArrayToObj = {}\n\n    useEffect(() => {\n        \n        getCategories()\n        getTags()\n        if (editMode) {\n            getResolutionById(resolutionId)\n                .then(setResolutionObj)\n\n            getTagsByResolution(resolutionId)\n                .then(resolutionTags.forEach(pt => {\n                    resolutionTagsArrayToObj[pt.tag_id] = true\n                }))\n                .then(setCheckedState(resolutionTagsArrayToObj))\n        }\n    }, [])\n\n\n    const handleControlledInputChange = (browserEvent) => {\n        const newResolution = Object.assign({}, resolutionObj)\n        newResolution[browserEvent.target.name] = browserEvent.target.value\n        setResolutionObj(newResolution)\n    }\n\n\n    function handleTagChange(event) {\n        const value = event.target.checked\n\n        setCheckedState({\n            ...checkedState,\n            [event.target.name]: value\n        })\n    }\n\n\n    function handleResolutionChange(event) {\n        \n        const newResolution = Object.assign({}, resolutionObj)\n        newResolution.completed = !newResolution.completed\n        setResolutionObj(newResolution)\n    }\n\n\n    const constructResolution = (evt) => {\n        evt.preventDefault()\n\n        if (editMode) {\n            updateResolution({\n                id: resolutionObj.id,\n                title: resolutionObj.title,\n                content: resolutionObj.content,\n                category_id: parseInt(resolutionObj.category_id),\n                publication_date: resolutionObj.publication_date,\n                image_url: resolutionObj.image_url,\n                completed: resolutionObj.completed\n            })\n                .then(\n                    resolutionTags.forEach(tagResolutionObj => {\n                        deleteTagResolution(tagResolutionObj.id, tagResolutionObj.resolution_id)\n                    }))\n                .then(() => {\n                    const tagResolutionPromises = [] //empty array of possible TagPosts\n\n                    Object.keys(checkedState).forEach(key =>\n                        checkedTagsArray.push({\n                            tagId: parseInt(key),\n                            checked: checkedState[key]\n                        }))\n\n                    filteredTrue = checkedTagsArray.filter(t => t.checked === true)\n\n                    checkedTagsArray.filter(filteredObj => {\n                        return filteredObj.tagId\n                    })\n\n                    filteredTrue.map(t => {\n                        tagResolutionPromises.push(\n                            createTagResolution({\n                                tag_id: parseInt(t.tagId),\n                                resolution_id: resolutionObj.id\n                            })\n                        ) //push any newly created tags to promises array\n                    })\n\n                    Promise.all(tagResolutionPromises)\n                        .then(() => {\n                            props.history.push(`/resolutions/${resolutionId}`)\n                        })\n                })\n        } else {\n            const jsonDate = ((new Date(Date.now())).toJSON()).slice(0, 10)\n            addResolution({\n                title: resolutionObj.title,\n                content: resolutionObj.content,\n                category_id: parseInt(resolutionObj.category_id),\n                publication_date: jsonDate,\n                image_url: resolutionObj.image_url,\n                completed: resolutionObj.completed\n                \n            })\n                .then((resolutionObj) => {\n                    const tagResolutionPromises = [] //empty array of possible TagPosts\n\n                    Object.keys(checkedState).forEach(key =>\n                        checkedTagsArray.push({\n                            tagId: key,\n                            checked: checkedState[key]\n                        }))\n\n                    filteredTrue = checkedTagsArray.filter(t => t.checked === true)\n\n                    filteredTrue.map(t => {\n                        tagResolutionPromises.push(\n                            createTagResolution({\n                                tag_id: parseInt(t.tagId),\n                                resolution_id: resolutionObj.id\n                            })\n                        ) //push any newly created tags to promises array\n                    })\n\n                    Promise.all(tagResolutionPromises)\n                        .then(() => {\n                            props.history.push(`/resolutions/${resolutionObj.id}`)\n                        })\n                })\n        }\n    }\n\n    \n\n    return (\n        <>\n            {editMode\n                ? <h2>Edit Resolution</h2>\n                : <h2>New Resolution</h2>\n            }\n\n            <form>\n                <fieldset>\n                    <div className=\"form-group\">\n                        <TextInput type=\"text\" name=\"title\" className=\"form-control\"\n                            placeholder=\"Title\" value={resolutionObj.title}\n                            onChange={handleControlledInputChange}\n                        >\n                        </TextInput>\n                    </div>\n                </fieldset>\n\n\n                <fieldset>\n                    <div className=\"form-group\">\n                        <TextInput type=\"text\" name=\"content\" className=\"form-control\"\n                            placeholder=\"Article content\" value={resolutionObj.content}\n                            onChange={handleControlledInputChange}\n                        >\n                        </TextInput>\n                    </div>\n                </fieldset>\n\n                <fieldset>\n                    <div className=\"form-group\">\n                        \n                    <Select\n                         name=\"category_id\" className=\"form-control\"\n                            value={resolutionObj.category_id}\n                            onChange={handleControlledInputChange}\n                        >\n                    \n                            <option value=\"0\">Category Select</option>\n                            {\n                                categories.map(c => {\n                                    return <option key={c.id} value={c.id}>{c.label}</option>\n                                })\n                            }\n                             \n                        </Select>\n                        \n\n                    </div>\n                    \n\n\n                </fieldset>\n         \n\n\n                {editMode   //if in edit mode, displays a Save button, otherwise displays a Publish button\n                    ?\n                    \n                    <Button onClick={(evt) => { constructResolution(evt) }}>\n                        Save\n                        </Button>\n                    :\n                    <Button marginRight={16} appearance=\"primary\" intent=\"Publish\" onClick={(evt) => { constructResolution(evt) }}>\n                        Publish\n                        </Button>\n                }\n\n                <div className=\"Tags\">Tags</div>\n                <div className=\"container--checkboxes\">\n                    {tags.map((t) => (\n                        <div className=\"checkboxGroup\">\n                          <label>\n                                {\" #\"}{t.label}\n                            </label>\n                            <Checkbox\n                                type=\"checkbox\"\n                                name={t.id}\n                                value={t.id}\n                                checked={checkedState[t.id]}\n                                onChange={handleTagChange}\n                            />\n                          \n                        </div>\n                    ))}\n                </div>\n\n                <div className=\"container--checkboxes\">\n                <div className=\"completed\">Completed Resolution?</div>\n\n                    <div className=\"check\">\n                            <label>\n                        Completed?\n                </label>\n                    <Checkbox className=\"check-approve\"\n                        defaultValue = \"false\"\n                        type=\"checkbox\"\n                        name=\"completed\"\n                        checked={resolutionObj.completed}\n                        onChange={handleResolutionChange} ></Checkbox>\n            \n                </div>\n\n\n                </div>\n\n\n\n\n\n\n\n\n            </form>\n        </>\n    )\n\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/Categories/CategoryProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/HomeList.js",["218","219","220","221","222","223"],"\nimport React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"./UserProvider\";\nimport { UsersTable } from \"./UsersTable.js\"\nimport { Heading, Pane } from \"evergreen-ui\"\nimport clock from \"./Clock.png\"\nimport \"./Profile.css\"\n <div className=\"Channel2\"></div>\n\n\nexport const HomeList = () => {\n    const { users, getUsers, user, getCurrentUser, setUser } = useContext(UserContext)\n\n    useEffect(() => {\n        getUsers()\n        getCurrentUser()\n            .then(setUser)\n    }, [])\n\n\n    return (\n        <>\n        <Pane>\n        <Heading className=\"channel2\" Clas></Heading></Pane>\n      \n        \n        <img src={clock} />\n         <Pane\n    elevation={4}\n  background=\"overlay\"\n \n  >\n\n    <h3 className=\"Channel3\">History of Resolutions</h3>\n            <div className=\"Channel\">According to the History Channel, New Year’s resolutions date back roughly 4,000 years, to when the Babylonians -- a population living in what was then Mesopotamia -- commemorated the new year in March, when the season’s crops were planted. The celebration consisted of a 12-day festival called Akitu, when either a new king was crowned, or loyalty to the existing monarchy was renewed.\n\nBut it was also a time for the Babylonians to make certain promises -- things like settling debts and returning anything that wasn’t theirs to its proper owner. Maintaining these resolutions, they believed, came with karmic retribution, in that kept promises would be rewarded with good fortune in the following year.\n\nThe Romans are said to be the first to create the concept of January 1 and designate it the first day of the year, beginning around 46 B.C. The name of the month is rooted in Janus, a god of particular importance to the Romans, due to his two-faced nature. It was believed that Janus could use his two faces to both look back on the outgoing year, and forward to the next one. Similar to the Babylonians, Romans made vows of good deeds to Janus before the new year arrived.</div>\n           \n            </Pane>\n        </>\n       \n    )\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagForm.js",["224"],"//form to create a new tag\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { TagContext } from \"./TagProvider\"\nimport { Button, TextInput } from \"evergreen-ui\"\n\n\n\n\nexport const TagForm = (props) => {\n    // Use the required context providers for data\n    const { createTag, updateTag, getTagById } = useContext(TagContext)\n    const editMode = props.match.params.hasOwnProperty(\"tagId\")\n\n    //state variable and functions that change state of the state variable\n    const [open, setOpen] = useState();\n    const onOpen = () => setOpen(true);\n    const onClose = () => setOpen(undefined);\n\n    //toggles the CSS class name depending on if the modal is open or not\n    const showHideClassName = open ? \"modal display-block\" : \"modal display-none\";\n\n    const [tagObj, setTagObj] = useState({})\n\n    const handleControlledInputChange = (event) => {\n        /*\n            When changing a state object or array, always create a new one\n            and change state instead of modifying current one\n        */\n        const newTag = Object.assign({}, tagObj)          // Create copy\n        newTag[event.target.name] = event.target.value    // Modify copy\n        setTagObj(newTag)                                 // Set copy as new state\n    }\n\n    useEffect(() => {\n        if (editMode) {\n            getTagById(parseInt(props.match.params.tagId))\n                .then(tag => {\n                    setTagObj({\n                        label: tag.label\n                    })\n                })\n        }\n    }, [props.match.params.tagId])\n\n    return (\n        <fieldset className=\"tagForm\">\n            <h2 className=\"tagForm__title\">Tag form</h2>\n            <div className=\"form-group\">\n\n                <label htmlFor=\"label\">Enter tag name: </label>\n                <TextInput type=\"text\" name=\"label\" required autoFocus className=\"form-control\"\n                    placeholder=\"ex: sports, politics, etc\"\n                    value={tagObj.label}\n                    onChange={handleControlledInputChange}\n                />\n\n            </div>\n            {editMode ? <Button onClick={onOpen}>EDIT</Button> : \"\" }\n\n            {open && (\n                <div className={showHideClassName}>\n                    <div className=\"modal-main\">\n                        <h3 className=\"are\">\n                            Confirm\n            </h3>\n                        <p className=\"are\">Are you sure you want to make these changes?</p>\n                        <div>\n                            <Button onClick={() => {\n                                updateTag({\n                                    id: parseInt(props.match.params.tagId),\n                                    label: tagObj.label\n                                })\n                                    .then(() => {\n                                        props.history.push(`/tags`)\n                                    })\n                            }}> Edit</Button>\n                            <Button onClick={onClose}> Cancel </Button>\n                        </div>\n                    </div>\n                </div>\n            )}\n            {editMode ? \"\" : <Button type=\"submit\"\n                onClick={evt => {\n                    evt.preventDefault()\n                    createTag({\n                        label: tagObj.label\n                    })\n                        .then(() => props.history.push(\"/tags\"))\n                }}\n\n                className=\"btn btn-primary\">\n                Create Tag\n                </Button>}\n        </fieldset>\n    )\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/Tag.js",["225"],"/home/cwelshofer/workspace/finalcapstone-client/src/components/tags/TagList.js",["226","227"],"//renders list of tags in tag management, maps over tags in DB and displays each individual tag component\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { TagContext } from \"./TagProvider\"\nimport { UserContext } from \"../Profiles/UserProvider\"\nimport { DeleteTag } from \"../utils/DeleteTag\"\nimport { Link } from \"react-router-dom\"\nimport { Menu, Button } from \"evergreen-ui\"\nimport \"./Tags.css\"\n\n\nexport const TagList = ({ props }) => {\n    const { getTags, tags} = useContext(TagContext)\n    const { getCurrentUser } = useContext(UserContext)\n    const [currentUser, setCurrentUser] = useState({ user: {} })\n\n\n    // Initialization effect hook -> Go get tag data\n    useEffect(() => {\n        getTags()\n    }, [])\n\n    useEffect(() => {\n        getCurrentUser()\n            .then(setCurrentUser)\n    }, [])\n\n\n    return (\n        <div className=\"tag_container\">\n            <h1 className=\"heading\">Tags</h1>\n            <div className=\"tags_container\">\n                {\n                    tags.map(tag => {\n                        return (<>\n                        <Menu>\n                            <Menu.Item>\n                            <div className=\"classTags\">{tag.label}</div>\n                            </Menu.Item>\n                            </Menu>\n                            {currentUser.user.is_active ? \n                                <>\n                                <DeleteTag tagId={tag.id} /> \n                                <div className=\"new_tag_btn_container\"> \n                                    <Link to={`/tags/edit/${tag.id}`}>\n                                        <Button className=\"new_tag_btn\">Edit Tag</Button>\n                                    </Link>\n                                </div>\n                                </> : <></>}\n                        </>)\n                    })\n\n                }\n            </div>\n            <Button>\n            <Link className=\"tagform__link\" to=\"/tags/create\">Create a new tag</Link>\n            </Button>\n        </div>\n\n    )\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteTag.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Categories/CategoryList.js",["228","229"],"//list of categories the user has created\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { CategoryContext } from \"./CategoryProvider\";\nimport { UserContext } from \"../Profiles/UserProvider\"\nimport { DeleteCategory } from \"../utils/DeleteCategory\"\nimport { Link } from \"react-router-dom\";\nimport { Menu, Button } from \"evergreen-ui\"\nimport \"./Category.css\"\n\n\nexport const CategoryList = (props) => {\n  const { categories, getCategories } = useContext(CategoryContext)\n  const { getCurrentUser } = useContext(UserContext)\n  const [currentUser, setCurrentUser] = useState({ user: {} })\n\n  //gets the categories from the database\n  useEffect(() => {\n    getCategories()\n\n  }, []);\n\n  useEffect(() => {\n    getCurrentUser()\n      .then(setCurrentUser)\n  }, []);\n\n  //this function is called on the click of the '+category' button\n  // it takes us to a new route where a category creation form is rendered\n  const toCreateCreateCategory = () => {\n    props.history.push(\"/categories/create\");\n  };\n\n  return (\n    \n    <div className=\"categoryList\">\n      <h3 className=\"category\">Categories</h3>\n      <div className=\"categoryList\">\n        {categories.map((categoryObject) => {\n          return <>\n      <Menu>\n          <Menu.Item>\n            <div className=\"categoryobject\" key={categoryObject.id}>{categoryObject.label}</div>\n              </Menu.Item>\n                </Menu>\n            { //only shows edit and delete if the user is an admin\n              currentUser.user.is_active ?\n                <>\n                   <DeleteCategory categoryId={categoryObject.id} />\n                  <div className=\"new_category_btn_container\">\n                    <Link className=\"editcategory\" to={`/editcategory/${categoryObject.id}`}>\n                     <Button className=\"new_category_btn\" >EDIT</Button>\n                    </Link>\n                 \n                  \n                  </div>\n                 \n                </>\n                : \"\"}\n              \n          </>\n        })}\n        <Button onClick={toCreateCreateCategory}>+ Category</Button>\n      </div>\n    </div>\n\n\n  )\n};\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/utils/DeleteCategory.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Categories/CategoryForm.js",["230","231","232"],"//Form to let user create a new category\nimport React, { useEffect, useContext, useState, useHistory } from \"react\";\nimport { CategoryContext } from \"./CategoryProvider\";\nimport { TextInput, Button } from \"evergreen-ui\"\n\n\n\nexport const CategoryForm = (props) => {\n  const { getCategories, createCategory, editCategory, getCategoryById } = useContext(CategoryContext)\n  \n  const editMode = props.match.url.split(\"/\")[1] === \"editcategory\" //checks url to see if editMode\n\n  const [currentCategory, setCurrentCategory] = useState({})\n\n  //state variable and functions that change state of the state variable\n  const [open, setOpen] = useState();\n  const onOpen = () => setOpen(true);\n  const onClose = () => setOpen(undefined);\n\n  const showHideClassName = open ? \"modal display-block\" : \"modal display-none\";\n\n  //gets the categories from the database\n  useEffect(() => {\n    getCategories()\n  }, [])\n\n  useEffect(() => {\n    if (editMode) {\n      getCategoryById(parseInt(props.match.params.categoryId))\n        .then(category => {\n          setCurrentCategory({\n            label: category.label\n          })\n        })\n    }\n  }, [props.match.params.categoryId])\n\n  //function that is called when a change happens in the form. It sets the state variable that is imported via context.\n  //whatever the value that goes in the input (the evt) is being written as single property object with a key of 'type'\n  //and the value of the form input\n  const handleChange = (event) => {\n    const newCategoryState = Object.assign({}, currentCategory)\n    newCategoryState[event.target.name] = event.target.value\n    setCurrentCategory(newCategoryState)\n  }\n\n  return (\n\n    <fieldset>\n      <label htmlFor=\"label\">\n        <div className=\"label\">Category</div>\n        <TextInput\n          type=\"text\"\n          name=\"label\"\n          value={currentCategory.label}\n          onChange={handleChange}\n        />\n      </label>\n      {editMode ? <Button className=\"new_category_btn\" onClick={onOpen}>EDIT</Button> : \"\"}\n\n      {open && (\n\n        <div className={showHideClassName}>\n          <div className=\"modal-main\">\n            <h3 className=\"p\">Confirm</h3>\n            <p className=\"c\">Are you sure you want to make these changes?</p>\n            <div>\n              <Button onClick={() => {\n                editCategory({\n                  id: props.match.params.categoryId,\n                  label: currentCategory.label\n                }).then(() => {\n                  props.history.push(\"/categories\")\n                })\n              }}>\n                Edit\n              </Button>\n              <Button onClick={onClose}> Cancel </Button>\n            </div>\n          </div>\n        </div>\n\n\n      )}\n      {editMode ? \"\" :\n        <Button\n          type=\"submit\"\n          onClick={(evt) => {\n            evt.preventDefault();\n            createCategory({\n              label: currentCategory.label\n            })\n              .then(() => props.history.push(\"/categories\"))\n          }}\n          className=\"btn btn-primary\"\n        >Create New Category</Button>\n      }\n    </fieldset>\n\n  );\n};\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UserDetail.js",["233","234","235","236","237","238","239","240"],"//displays user information and allows user to subscribe and unsubscribe\nimport React, { useContext, useEffect, useState } from \"react\"\nimport { UserContext } from \"./UserProvider\"\nimport defaultImg from \"./Images/avatar.jpg\"\nimport { SubscriptionContext } from \"../Subscriptions/SubscriptionProvider\"\nimport { Link, useHistory } from \"react-router-dom\"\n\n\n\n\nexport const UserDetail = (props) => {\n    const { user, getUserById, getCurrentUser, setUser } = useContext(UserContext)\n    const { getSubscriptionByAuthor, unsubscribe, createSubscription } = useContext(SubscriptionContext)\n\n    const [subscription, setSubscription] = useState({})\n    const [subscriptions, setSubscriptions] = useState([])\n    const [subStatus, setSubStatus] = useState(false) //subscription state set to false\n\n    useEffect(() => {\n        if (props.match.params.hasOwnProperty(\"userId\")) {\n            getUserById(parseInt(props.match.params.userId))\n            .then(setUser)\n         \n            .then(() => {\n                getSubscriptionByAuthor(parseInt(props.match.params.userId))\n                .then(setSubscription)\n            })\n            } else {\n                //get an ARRAY of objects to show how many people follow YOU\n                getCurrentUser()\n                .then((user) => {\n                    setUser(user)\n                    getSubscriptionByAuthor(user.id)\n                    .then(setSubscriptions)\n                })\n            }\n        }, [])\n        \n        useEffect(() => {\n            if (subscription.ended_on !== null) { \n                setSubStatus(false)\n            } else {\n                setSubStatus(true)\n            }\n    },[subscription])\n\n    const changeSubStatus = (subscription) => {\n        const authorID = parseInt(props.match.params.userId)\n        if(subscription.ended_on === null) { //if end === null, user is still subscribed and can unsubscribe\n            unsubscribe(authorID)\n            .then(() => {\n                window.alert(\"You are now UNsubscribed!\")\n                props.history.push('/home')\n            })\n        } else {\n            createSubscription({ //user can create a subscription\n                author_id: authorID\n            })\n            .then(() => {\n                window.alert(\"You are now subscribed!\")\n                props.history.push('/home')\n            })\n        }\n    }\n\n        \n    return (\n        <>\n            <section>\n                \n                {props.match.params.hasOwnProperty(\"userId\") ?\n                    <h1 className=\"myProfile\">{user.user.username}'s Profile</h1> :<div className=\"myProfile\">\n                        <h1 style={{margin: \"2rem 0rem 2rem 0rem\"}}>My Profile</h1>\n                        <div>{user.user.first_name} {user.user.last_name}</div>\n                     \n                    </div>}\n                {user.user.profile_image_url === \"\" || user.user.profile_image_url === undefined\n                    ? <img src={defaultImg} style={{ width: `115px` }}></img>\n                    : <img src={user.user.profile_image_url} style={{ width: `115px` }}></img>\n                }\n                <div className=\"myProfile\">{user.user.profile_image_url}</div>\n                <div className=\"myProfile\">Username: {user.user.username}</div>\n                <div className=\"myProfile\">email: {user.user.email}</div>\n                <div className=\"myProfile\">Creation Date: {new Date(user.user.date_joined).toLocaleDateString('en-US')}</div>\n            </section>\n            <div>\n            </div>\n           \n        </>\n    )\n    \n        \n            }","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UserList.js",["241","242","243","244"],"import { Menu } from \"evergreen-ui\";\nimport { FormPrevious } from \"grommet-icons\"\nimport React, { useContext, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"./UserProvider\";\nimport { UsersTable } from \"./UsersTable.js\";\nimport \"./Profile.css\"\n\n\nexport const UsersList = () => {\n    const { users, getUsers, user, getCurrentUser, setUser } = useContext(UserContext)\n\n    useEffect(() => {\n        getUsers()\n        getCurrentUser()\n            .then(setUser)\n    }, [])\n\n\n    return (\n        <>\n            <h1>All Users</h1>\n            { \n                    <div className=\"userContainer\">\n                        <div className=\"allusers\">All Users</div>\n                        {/* VIEW FOR AUTHORS */}\n                        { /* map through users to generate content */\n                            users.map(u => {\n                                return <div>\n                               \n                                    { //different route for current user than other users\n                                        u.id === user.id ?\n                                        \n                                            <Link to={{ pathname: \"/profile\" }}>\n                                                <p className=\"userContainer\">{u.user.first_name} {u.user.last_name}</p>\n                                            </Link> :\n                                            <Link to={{ pathname: `/profiles/${u.id}` }}>\n                                                <p className=\"userContainer\">{u.user.first_name} {u.user.last_name}</p>\n                                            </Link>\n                                        \n                                    }\n                                \n                                </div>\n                            })\n                        }\n                    </div>\n            }\n        </>\n    )\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/Subscriptions/SubscriptionProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/UsersTable.js",["245","246"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Box, DataTable } from 'grommet';\nimport { columns } from './Columns';\nimport { UserContext } from \"./UserProvider\";\n\n\nexport const UsersTable = () => {\n  const { users, getUsers } = useContext(UserContext)\n  const controlledColumns = columns.map(col => ({ ...col }));\n\n  useEffect(() => {\n    getUsers()\n  }, []);\n\n\n\nconsole.log(users)\n  return (\n    <>\n      <Box align=\"center\" pad=\"medium\">\n        <DataTable\n          columns={[\n            ...controlledColumns,\n          ].map(col => ({ ...col }))}\n          data={users}\n          sortable\n          size=\"medium\"\n        />\n      </Box>\n    </>\n  );\n};","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/Columns.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Comments/CommentProvider.js",[],"/home/cwelshofer/workspace/finalcapstone-client/src/components/Comments/CommentForm.js",["247"],"import React, {useContext, useEffect, useRef, useState} from \"react\"\nimport { Button } from 'evergreen-ui'\nimport {CommentContext} from \"./CommentProvider\"\n\n\n\nexport const CommentForm = (props) => {\n    const { addComment, updateComment, getComments } = useContext(CommentContext) \n\n    const [ comment, setComment ] = useState({subject: '', content: ''})\n\n    const subject = useRef(null)\n    const content = useRef(null)\n\n    const editMode = props.match.params.hasOwnProperty(\"commentId\") // true or false\n    \n\n    useEffect(() => {\n        if (editMode) {\n            const commentId = parseInt(props.match.params.commentId);\n            \n            getComments(commentId)\n                .then(res => setComment(res))\n        }\n    }, [] )\n\n    const inputHandler = (e) => {\n        const newComment = {...comment}    // Create a copy\n        newComment[e.target.name] = e.target.value     // Modify copy\n        \n        setComment(newComment)\n    } \n\n    \n\n    const saveComment = () => {\n        if(editMode) {\n        updateComment(parseInt(props.match.params.commentId), {\n            subject : comment.subject,\n            content : comment.content,\n            resolution_id : comment.resolution_id,\n            created_on : comment.created_on\n        })\n        .then(props.history.push(`/resolutions/comments/comment.resolution_id}`))\n\n        } else {\n        addComment({\n            subject : comment.subject,\n            content : comment.content,\n            user_id : parseInt(localStorage.getItem(\"resolution_user_id\")),\n            resolution_id : parseInt(props.match.params.resolutionId)\n        }).then(props.history.push(`/resolutions/comments/${props.match.params.resolutionId}`))\n        }\n\n    }\n        \n    return (\n        <form className=\"CommentForm\">\n            <h3 className=\"CommentForm__title\">Add Comment</h3>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"subject\">Subject : </label>\n                    <input type=\"text\" ref={subject} name=\"subject\" required autoFocus className=\"form-control\" value={comment.subject} onChange={inputHandler}\n                    />\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"content\">Comment :</label>\n                    <input type=\"text\" ref={content} name=\"content\" required autoFocus className=\"form-control\" value={comment.content} onChange={inputHandler}\n                    \n                    />\n                </div>\n            </fieldset>\n            \n            {\n                \n                editMode ?\n                <div className=\"buttons\">\n                 <Button type=\"submit\" className=\"CommentSaveBtn btn btn-primary\"\n                    onClick={e => {\n                        e.preventDefault()\n                        saveComment()\n                    }}>Update\n                    </Button>\n                    <Button className=\"btn btn-secondary\" \n                    onClick={() => {\n                        props.history.push(`/resolutions/comments/${comment.resolution_id}`)}}>\n                Cancel\n                </Button>\n               \n             \n                </div>\n                :\n                <div className=\"buttons\">\n                <Button type=\"submit\" className=\"CommentSaveBtn btn btn-primary\"\n                    onClick={e => {\n                        e.preventDefault()\n                        saveComment()\n                    }}>Save</Button>\n                <Button className=\"btn btn-secondary\" \n                    onClick={() => {\n                        const resolutionId = parseInt(props.match.params.resolutionId)\n                        props.history.push(`/resolutions/comments/${resolutionId}`)}}>\n                Cancel</Button>\n                </div>\n                \n                 \n            }\n            \n            \n        </form>\n    )\n\n}\n            \n        ","/home/cwelshofer/workspace/finalcapstone-client/src/components/Comments/Comment.js",["248"],"//child of HomeList, list of all posts, user can delete only their own post\nimport React, { useContext, useEffect } from \"react\"\nimport {Link} from \"react-router-dom\"\nimport { ResolutionContext } from \"../Resolutions/ResolutionProvider\"\nimport { CommentContext } from \"./CommentProvider\"\nimport \"./Comments.css\" \nimport { Button } from \"evergreen-ui\"\n\n\n\nexport const CommentList = (props) => {\n    \n    const {comments, getComments} = useContext(CommentContext)\n    const {resolution} = useContext(ResolutionContext)\n\n    const resolutionId = parseInt(props.match.params.resolutionId)\n    \n    console.log(comments)\n    useEffect(() => {\n       getComments(resolutionId)\n\n    },[])\n\n    return (\n        <>\n        <h2 className=\"comment\">Comments</h2>\n        <Button>\n        <div><Link to={{pathname:`/home`}}>Back to Resolutions</Link></div>\n        </Button>\n        {\n            comments !== [] ? comments.map(c => {\n                return <>\n                <ul>\n                    <li>\n                <div key={c.id} className=\"container__card\">\n                    <p>Subject: {c.subject}</p>\n                \n                    <p>Content: {c.content}</p>\n\n                    <p>Created On: {c.created_on}</p>\n\n                    <p>Author: {c.author.username}</p>\n                    \n                </div>\n                </li>\n                </ul>\n                </>\n                \n            }).reverse() : null\n        }   <Button>\n             <Link className=\"resolutionLink\" to={`/resolutions/comments/create/${resolution.id}`}>\n            add Comment\n       \n    </Link>\n    </Button>\n        </>\n    )\n}\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/MyCompletedResolutions.js",["249","250","251"],"//shows user their own posts in MyPosts view, allows them to delete a post\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ResolutionContext } from \"./ResolutionProvider\";\nimport { UserContext } from \"../Profiles/UserProvider\"\nimport { Menu } from \"evergreen-ui\";\n\n\nexport const MyCompletedResolutionList = () => {\n  const { getResolutionByUser, getCompletedResolutions, getCompletedResolutionsByUser   } = useContext(ResolutionContext);\n  const { getCurrentUser } = useContext(UserContext)\n\n  const [usersResolutions, setUsersResolutions] = useState([]);\n \n  useEffect(() => {\n    getCurrentUser()\n    //returns res.json() that is immediately passed to the next .then()\n    //res.json() is the current user object\n     \n      .then((user) => getCompletedResolutionsByUser(user.id))\n      .then(setUsersResolutions)\n  }, [])\n\n  return (\n    <>\n      <h2 className=\"my\">My Completed Resolutions</h2>\n      {usersResolutions.map((r) => {\n        return (\n            <Menu>\n                <Menu.Item>\n          <div key={r.id} className=\"container__card\">\n            <div className=\"container__cardContent\">\n            \n                <Link to={{ pathname: `resolutions/${r.id}` }}>\n                  {r.title}\n                </Link>\n              \n              -----{r.user.user.first_name}\n              {r.category==null? \"\" :<p>{r.category.label}</p>}\n            </div>\n          </div>\n          </Menu.Item>\n          </Menu>\n        )\n       \n      }).reverse()}\n    </>\n  )\n}\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/CompletedResolutions.js",["252"],"//child of HomeList, list of all posts, user can delete only their own post\nimport {Link} from \"react-router-dom\"\nimport React, { useContext, useEffect } from \"react\"\nimport { ResolutionContext } from \"./ResolutionProvider\"\nimport { Resolution } from \"./Resolution\"\nimport { Button } from \"evergreen-ui\"\n\nexport const CompletedResolutionList = () => {\n    // This state changes when `getLocations()` is invoked below\n    const { resolutions, getCompletedResolutions } = useContext(ResolutionContext)\n\n    /*\n        What's the effect this is reponding to? Component was\n        \"mounted\" to the DOM. React renders blank HTML first,\n        then gets the data, then re-renders.\n    */\n    useEffect(() => {\n        getCompletedResolutions()\n    }, [])\n\n    /*\n        This effect is solely for learning purposes. The effect\n        it is responding to is that the location state changed.\n    */\n    useEffect(() => {\n    }, [resolutions])\n\n    return (\n        <div className=\"resolutions\">\n            <h2 className=\"all\">All Completed Resolutions</h2>\n           \n        {\n            resolutions.map(res => <Resolution key={res.id} resolution={res} />)\n        }\n        <Button>\n         <Link className=\"resolutionLink\" to={'/resolutions/create'}>\n            add Resolution     \n    </Link>\n    </Button>\n        </div>\n    )\n}","/home/cwelshofer/workspace/finalcapstone-client/src/components/Resolutions/AllUsersResolutions.js",["253","254"],"//shows user their own posts in MyPosts view, allows them to delete a post\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ResolutionContext } from \"./ResolutionProvider\";\nimport { UserContext } from \"../Profiles/UserProvider\"\n\n\nexport const AllUsersResolutions = () => {\n  const { getResolutionByUser, getCompletedResolutionsByUser  } = useContext(ResolutionContext);\n  const { getCurrentUser } = useContext(UserContext)\n\n  const [usersResolutions, setUsersResolutions] = useState([]);\n \n  useEffect(() => {\n    getCurrentUser()\n    //returns res.json() that is immediately passed to the next .then()\n    //res.json() is the current user object\n     \n      .then((user) => getCompletedResolutionsByUser(user.id))\n      .then(setUsersResolutions)\n  }, [])\n\n  return (\n    <>\n      <h2>My Resolutions</h2>\n      {usersResolutions.map((r) => {\n        return (\n          <div key={r.id} className=\"container__card\">\n            <div className=\"container__cardContent\">\n              <p>\n                <Link to={{ pathname: `resolutions/${r.id}` }}>\n                  <strong>{r.title}</strong>\n                </Link>\n              </p>\n              <p>{r.user.user.first_name}</p>\n              {r.category==null? \"\" :<p>{r.category.label}</p>}\n            </div>\n          </div>\n        )\n      }).reverse()}\n    </>\n  )\n}\n","/home/cwelshofer/workspace/finalcapstone-client/src/components/Profiles/ProfileResolutions.js",["255","256","257"],"//shows user their own posts in MyPosts view, allows them to delete a post\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ResolutionContext } from \"../Resolutions//ResolutionProvider\";\nimport { UserContext } from \"./UserProvider\"\n\n\nexport const UsersProfileResolutions = (props) => {\n  const { getResolutionByUser, setUser } = useContext(ResolutionContext);\n  const { getCurrentUser, getUserById } = useContext(UserContext)\n\n  const [usersResolutions, setUsersResolutions] = useState([]);\n\n  useEffect(() => {\n    if (props.match.params.hasOwnProperty(\"userId\")) {\n        getUserById(parseInt(props.match.params.userId))\n        .then(setUser)\n        //get the most recent sub OBJECT\n        //this determines whether the current user follows the author of the UserDetail page\n      }\n    }, [])\n    \n \n  useEffect(() => {\n    getUserById()\n    //returns res.json() that is immediately passed to the next .then()\n    //res.json() is the current user object\n      .then((user) => getResolutionByUser(user.id))\n      .then(setUsersResolutions)\n  }, [])\n\n  return (\n    <>\n      <h2>My Resolutions</h2>\n      {usersResolutions.map((r) => {\n        return (\n          <div key={r.id} className=\"container__card\">\n            <div className=\"container__cardContent\">\n              <p>\n                <Link to={{ pathname: `resolutions/${r.id}` }}>\n                  <strong>{r.title}</strong>\n                </Link>\n              </p>\n              <p>{r.user.user.first_name}</p>\n              {r.category==null? \"\" :<p>{r.category.label}</p>}\n            </div>\n          </div>\n        )\n      }).reverse()}\n    </>\n  )\n}\n",{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":16,"column":10,"nodeType":"264","messageId":"265","endLine":16,"endColumn":20},{"ruleId":"262","severity":1,"message":"266","line":27,"column":10,"nodeType":"264","messageId":"265","endLine":27,"endColumn":29},{"ruleId":"262","severity":1,"message":"267","line":16,"column":11,"nodeType":"264","messageId":"265","endLine":16,"endColumn":14},{"ruleId":"262","severity":1,"message":"268","line":20,"column":10,"nodeType":"264","messageId":"265","endLine":20,"endColumn":33},{"ruleId":"262","severity":1,"message":"269","line":21,"column":10,"nodeType":"264","messageId":"265","endLine":21,"endColumn":22},{"ruleId":"262","severity":1,"message":"270","line":25,"column":9,"nodeType":"264","messageId":"265","endLine":25,"endColumn":24},{"ruleId":"271","severity":1,"message":"272","line":33,"column":6,"nodeType":"273","endLine":33,"endColumn":22,"suggestions":"274"},{"ruleId":"271","severity":1,"message":"275","line":44,"column":6,"nodeType":"273","endLine":44,"endColumn":22,"suggestions":"276"},{"ruleId":"262","severity":1,"message":"277","line":48,"column":10,"nodeType":"264","messageId":"265","endLine":48,"endColumn":14},{"ruleId":"262","severity":1,"message":"278","line":48,"column":16,"nodeType":"264","messageId":"265","endLine":48,"endColumn":23},{"ruleId":"262","severity":1,"message":"279","line":51,"column":9,"nodeType":"264","messageId":"265","endLine":51,"endColumn":21},{"ruleId":"262","severity":1,"message":"280","line":55,"column":9,"nodeType":"264","messageId":"265","endLine":55,"endColumn":22},{"ruleId":"271","severity":1,"message":"281","line":19,"column":8,"nodeType":"273","endLine":19,"endColumn":10,"suggestions":"282"},{"ruleId":"262","severity":1,"message":"283","line":3,"column":16,"nodeType":"264","messageId":"265","endLine":3,"endColumn":26},{"ruleId":"262","severity":1,"message":"284","line":5,"column":3,"nodeType":"264","messageId":"265","endLine":5,"endColumn":9},{"ruleId":"285","severity":1,"message":"286","line":46,"column":31,"nodeType":"287","messageId":"288","endLine":46,"endColumn":33},{"ruleId":"262","severity":1,"message":"289","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":13},{"ruleId":"262","severity":1,"message":"290","line":2,"column":23,"nodeType":"264","messageId":"265","endLine":2,"endColumn":30},{"ruleId":"262","severity":1,"message":"291","line":2,"column":32,"nodeType":"264","messageId":"265","endLine":2,"endColumn":36},{"ruleId":"262","severity":1,"message":"292","line":14,"column":45,"nodeType":"264","messageId":"265","endLine":14,"endColumn":56},{"ruleId":"271","severity":1,"message":"293","line":20,"column":8,"nodeType":"273","endLine":20,"endColumn":10,"suggestions":"294"},{"ruleId":"295","severity":1,"message":"296","line":26,"column":17,"nodeType":"297","endLine":26,"endColumn":40},{"ruleId":"295","severity":1,"message":"296","line":32,"column":17,"nodeType":"297","endLine":32,"endColumn":40},{"ruleId":"262","severity":1,"message":"298","line":3,"column":22,"nodeType":"264","messageId":"265","endLine":3,"endColumn":31},{"ruleId":"271","severity":1,"message":"299","line":21,"column":6,"nodeType":"273","endLine":21,"endColumn":8,"suggestions":"300"},{"ruleId":"262","severity":1,"message":"301","line":7,"column":10,"nodeType":"264","messageId":"265","endLine":7,"endColumn":17},{"ruleId":"262","severity":1,"message":"302","line":7,"column":19,"nodeType":"264","messageId":"265","endLine":7,"endColumn":22},{"ruleId":"262","severity":1,"message":"303","line":7,"column":24,"nodeType":"264","messageId":"265","endLine":7,"endColumn":33},{"ruleId":"262","severity":1,"message":"304","line":9,"column":18,"nodeType":"264","messageId":"265","endLine":9,"endColumn":28},{"ruleId":"262","severity":1,"message":"305","line":12,"column":7,"nodeType":"264","messageId":"265","endLine":12,"endColumn":24},{"ruleId":"262","severity":1,"message":"306","line":15,"column":102,"nodeType":"264","messageId":"265","endLine":15,"endColumn":116},{"ruleId":"262","severity":1,"message":"307","line":15,"column":118,"nodeType":"264","messageId":"265","endLine":15,"endColumn":129},{"ruleId":"262","severity":1,"message":"308","line":15,"column":131,"nodeType":"264","messageId":"265","endLine":15,"endColumn":149},{"ruleId":"262","severity":1,"message":"267","line":17,"column":13,"nodeType":"264","messageId":"265","endLine":17,"endColumn":16},{"ruleId":"262","severity":1,"message":"309","line":22,"column":12,"nodeType":"264","messageId":"265","endLine":22,"endColumn":19},{"ruleId":"262","severity":1,"message":"310","line":22,"column":21,"nodeType":"264","messageId":"265","endLine":22,"endColumn":31},{"ruleId":"271","severity":1,"message":"311","line":44,"column":8,"nodeType":"273","endLine":44,"endColumn":10,"suggestions":"312"},{"ruleId":"313","severity":1,"message":"314","line":104,"column":40,"nodeType":"315","messageId":"316","endLine":104,"endColumn":42},{"ruleId":"313","severity":1,"message":"314","line":140,"column":40,"nodeType":"315","messageId":"316","endLine":140,"endColumn":42},{"ruleId":"262","severity":1,"message":"317","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":14},{"ruleId":"262","severity":1,"message":"263","line":5,"column":10,"nodeType":"264","messageId":"265","endLine":5,"endColumn":20},{"ruleId":"262","severity":1,"message":"318","line":13,"column":13,"nodeType":"264","messageId":"265","endLine":13,"endColumn":18},{"ruleId":"262","severity":1,"message":"319","line":13,"column":30,"nodeType":"264","messageId":"265","endLine":13,"endColumn":34},{"ruleId":"271","severity":1,"message":"320","line":19,"column":8,"nodeType":"273","endLine":19,"endColumn":10,"suggestions":"321"},{"ruleId":"295","severity":1,"message":"296","line":28,"column":9,"nodeType":"297","endLine":28,"endColumn":28},{"ruleId":"271","severity":1,"message":"322","line":43,"column":8,"nodeType":"273","endLine":43,"endColumn":34,"suggestions":"323"},{"ruleId":"324","severity":1,"message":"325","line":5,"column":1,"nodeType":"326","endLine":11,"endColumn":2},{"ruleId":"271","severity":1,"message":"327","line":20,"column":8,"nodeType":"273","endLine":20,"endColumn":10,"suggestions":"328"},{"ruleId":"271","severity":1,"message":"329","line":25,"column":8,"nodeType":"273","endLine":25,"endColumn":10,"suggestions":"330"},{"ruleId":"271","severity":1,"message":"331","line":20,"column":6,"nodeType":"273","endLine":20,"endColumn":8,"suggestions":"332"},{"ruleId":"271","severity":1,"message":"329","line":25,"column":6,"nodeType":"273","endLine":25,"endColumn":8,"suggestions":"333"},{"ruleId":"262","severity":1,"message":"283","line":2,"column":50,"nodeType":"264","messageId":"265","endLine":2,"endColumn":60},{"ruleId":"271","severity":1,"message":"331","line":25,"column":6,"nodeType":"273","endLine":25,"endColumn":8,"suggestions":"334"},{"ruleId":"271","severity":1,"message":"335","line":36,"column":6,"nodeType":"273","endLine":36,"endColumn":37,"suggestions":"336"},{"ruleId":"262","severity":1,"message":"317","line":6,"column":10,"nodeType":"264","messageId":"265","endLine":6,"endColumn":14},{"ruleId":"262","severity":1,"message":"283","line":6,"column":16,"nodeType":"264","messageId":"265","endLine":6,"endColumn":26},{"ruleId":"262","severity":1,"message":"337","line":16,"column":12,"nodeType":"264","messageId":"265","endLine":16,"endColumn":25},{"ruleId":"262","severity":1,"message":"338","line":17,"column":12,"nodeType":"264","messageId":"265","endLine":17,"endColumn":21},{"ruleId":"271","severity":1,"message":"339","line":37,"column":12,"nodeType":"273","endLine":37,"endColumn":14,"suggestions":"340"},{"ruleId":"262","severity":1,"message":"341","line":47,"column":11,"nodeType":"264","messageId":"265","endLine":47,"endColumn":26},{"ruleId":"295","severity":1,"message":"296","line":78,"column":23,"nodeType":"297","endLine":78,"endColumn":72},{"ruleId":"295","severity":1,"message":"296","line":79,"column":23,"nodeType":"297","endLine":79,"endColumn":89},{"ruleId":"262","severity":1,"message":"342","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":14},{"ruleId":"262","severity":1,"message":"343","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":6,"column":10,"nodeType":"264","messageId":"265","endLine":6,"endColumn":20},{"ruleId":"271","severity":1,"message":"320","line":17,"column":8,"nodeType":"273","endLine":17,"endColumn":10,"suggestions":"344"},{"ruleId":"262","severity":1,"message":"345","line":1,"column":40,"nodeType":"264","messageId":"265","endLine":1,"endColumn":48},{"ruleId":"271","severity":1,"message":"346","line":13,"column":6,"nodeType":"273","endLine":13,"endColumn":8,"suggestions":"347"},{"ruleId":"271","severity":1,"message":"348","line":25,"column":8,"nodeType":"273","endLine":25,"endColumn":10,"suggestions":"349"},{"ruleId":"271","severity":1,"message":"350","line":22,"column":7,"nodeType":"273","endLine":22,"endColumn":9,"suggestions":"351"},{"ruleId":"262","severity":1,"message":"352","line":10,"column":11,"nodeType":"264","messageId":"265","endLine":10,"endColumn":30},{"ruleId":"262","severity":1,"message":"353","line":10,"column":32,"nodeType":"264","messageId":"265","endLine":10,"endColumn":55},{"ruleId":"271","severity":1,"message":"354","line":22,"column":6,"nodeType":"273","endLine":22,"endColumn":8,"suggestions":"355"},{"ruleId":"271","severity":1,"message":"356","line":19,"column":8,"nodeType":"273","endLine":19,"endColumn":10,"suggestions":"357"},{"ruleId":"262","severity":1,"message":"352","line":9,"column":11,"nodeType":"264","messageId":"265","endLine":9,"endColumn":30},{"ruleId":"271","severity":1,"message":"354","line":21,"column":6,"nodeType":"273","endLine":21,"endColumn":8,"suggestions":"358"},{"ruleId":"262","severity":1,"message":"359","line":10,"column":11,"nodeType":"264","messageId":"265","endLine":10,"endColumn":25},{"ruleId":"271","severity":1,"message":"360","line":21,"column":8,"nodeType":"273","endLine":21,"endColumn":10,"suggestions":"361"},{"ruleId":"271","severity":1,"message":"362","line":30,"column":6,"nodeType":"273","endLine":30,"endColumn":8,"suggestions":"363"},"no-native-reassign",["364"],"no-negated-in-lhs",["365"],"no-unused-vars","'UsersTable' is defined but never used.","Identifier","unusedVar","'AllUsersResolutions' is defined but never used.","'tag' is assigned a value but never used.","'selectedTagResolutionId' is assigned a value but never used.","'filteredTags' is assigned a value but never used.","'tagResolutionId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getResolutionById', 'getTags', 'getTagsByResolution', 'resolutionId', and 'setResolution'. Either include them or remove the dependency array.","ArrayExpression",["366"],"React Hook useEffect has a missing dependency: 'tags'. Either include it or remove the dependency array.",["367"],"'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleAddTags' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFalseResolutions'. Either include it or remove the dependency array.",["368"],"'useHistory' is defined but never used.","'Anchor' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Tab' is defined but never used.","'Heading' is defined but never used.","'Pane' is defined but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentUser' and 'setCurrentUser'. Either include them or remove the dependency array.",["369"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'getCurrentUser' and 'getResolutionByUser'. Either include them or remove the dependency array.",["370"],"'Grommet' is defined but never used.","'Box' is defined but never used.","'DataTable' is defined but never used.","'SelectMenu' is defined but never used.","'controlledColumns' is assigned a value but never used.","'getResolutions' is assigned a value but never used.","'resolutions' is assigned a value but never used.","'completeResolution' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editMode', 'getCategories', 'getResolutionById', 'getTags', 'getTagsByResolution', 'resolutionId', 'resolutionTags', and 'resolutionTagsArrayToObj'. Either include them or remove the dependency array.",["371"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'users' is assigned a value but never used.","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentUser', 'getUsers', and 'setUser'. Either include them or remove the dependency array.",["372"],"React Hook useEffect has missing dependencies: 'editMode' and 'getTagById'. Either include them or remove the dependency array.",["373"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'getTags'. Either include it or remove the dependency array.",["374"],"React Hook useEffect has a missing dependency: 'getCurrentUser'. Either include it or remove the dependency array.",["375"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["376"],["377"],["378"],"React Hook useEffect has missing dependencies: 'editMode' and 'getCategoryById'. Either include them or remove the dependency array.",["379"],"'subscriptions' is assigned a value but never used.","'subStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentUser', 'getSubscriptionByAuthor', 'getUserById', 'props.match.params', and 'setUser'. Either include them or remove the dependency array.",["380"],"'changeSubStatus' is assigned a value but never used.","'Menu' is defined but never used.","'FormPrevious' is defined but never used.",["381"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["382"],"React Hook useEffect has missing dependencies: 'editMode', 'getComments', and 'props.match.params.commentId'. Either include them or remove the dependency array.",["383"],"React Hook useEffect has missing dependencies: 'getComments' and 'resolutionId'. Either include them or remove the dependency array.",["384"],"'getResolutionByUser' is assigned a value but never used.","'getCompletedResolutions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCompletedResolutionsByUser' and 'getCurrentUser'. Either include them or remove the dependency array.",["385"],"React Hook useEffect has a missing dependency: 'getCompletedResolutions'. Either include it or remove the dependency array.",["386"],["387"],"'getCurrentUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getUserById', 'props.match.params', and 'setUser'. Either include them or remove the dependency array.",["388"],"React Hook useEffect has missing dependencies: 'getResolutionByUser' and 'getUserById'. Either include them or remove the dependency array.",["389"],"no-global-assign","no-unsafe-negation",{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"408","fix":"412"},{"desc":"410","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"402","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"425","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},"Update the dependencies array to be: [TagResolutions, getResolutionById, getTags, getTagsByResolution, resolutionId, setResolution]",{"range":"434","text":"435"},"Update the dependencies array to be: [resolutionTags, tags]",{"range":"436","text":"437"},"Update the dependencies array to be: [getFalseResolutions]",{"range":"438","text":"439"},"Update the dependencies array to be: [getCurrentUser, setCurrentUser]",{"range":"440","text":"441"},"Update the dependencies array to be: [getCurrentUser, getResolutionByUser]",{"range":"442","text":"443"},"Update the dependencies array to be: [editMode, getCategories, getResolutionById, getTags, getTagsByResolution, resolutionId, resolutionTags, resolutionTagsArrayToObj]",{"range":"444","text":"445"},"Update the dependencies array to be: [getCurrentUser, getUsers, setUser]",{"range":"446","text":"447"},"Update the dependencies array to be: [editMode, getTagById, props.match.params.tagId]",{"range":"448","text":"449"},"Update the dependencies array to be: [getTags]",{"range":"450","text":"451"},"Update the dependencies array to be: [getCurrentUser]",{"range":"452","text":"453"},"Update the dependencies array to be: [getCategories]",{"range":"454","text":"455"},{"range":"456","text":"453"},{"range":"457","text":"455"},"Update the dependencies array to be: [editMode, getCategoryById, props.match.params.categoryId]",{"range":"458","text":"459"},"Update the dependencies array to be: [getCurrentUser, getSubscriptionByAuthor, getUserById, props.match.params, setUser]",{"range":"460","text":"461"},{"range":"462","text":"447"},"Update the dependencies array to be: [getUsers]",{"range":"463","text":"464"},"Update the dependencies array to be: [editMode, getComments, props.match.params.commentId]",{"range":"465","text":"466"},"Update the dependencies array to be: [getComments, resolutionId]",{"range":"467","text":"468"},"Update the dependencies array to be: [getCompletedResolutionsByUser, getCurrentUser]",{"range":"469","text":"470"},"Update the dependencies array to be: [getCompletedResolutions]",{"range":"471","text":"472"},{"range":"473","text":"470"},"Update the dependencies array to be: [getUserById, props.match.params, setUser]",{"range":"474","text":"475"},"Update the dependencies array to be: [getResolutionByUser, getUserById]",{"range":"476","text":"477"},[1557,1573],"[TagResolutions, getResolutionById, getTags, getTagsByResolution, resolutionId, setResolution]",[1980,1996],"[resolutionTags, tags]",[730,732],"[getFalseResolutions]",[739,741],"[getCurrentUser, setCurrentUser]",[803,805],"[getCurrentUser, getResolutionByUser]",[1985,1987],"[editMode, getCategories, getResolutionById, getTags, getTagsByResolution, resolutionId, resolutionTags, resolutionTagsArrayToObj]",[543,545],"[getCurrentUser, getUsers, setUser]",[1532,1558],"[editMode, getTagById, props.match.params.tagId]",[734,736],"[getTags]",[827,829],"[getCurrentUser]",[697,699],"[getCategories]",[777,779],[896,898],[1132,1163],"[editMode, getCategoryById, props.match.params.categoryId]",[1467,1469],"[getCurrentUser, getSubscriptionByAuthor, getUserById, props.match.params, setUser]",[515,517],[382,384],"[getUsers]",[742,744],"[editMode, getComments, props.match.params.commentId]",[678,680],"[getComments, resolutionId]",[887,889],"[getCompletedResolutionsByUser, getCurrentUser]",[747,749],"[getCompletedResolutions]",[818,820],[861,863],"[getUserById, props.match.params, setUser]",[1116,1118],"[getResolutionByUser, getUserById]"]